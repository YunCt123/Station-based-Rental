import { useState, useEffect } from "react";import { useState, useEffect } from "react";

import { Link } from "react-router-dom";import { Link } from "react-router-dom";

import { Card } from "@/components/ui/card";import { Card } from "@/components/ui/card";

import { Button } from "@/components/ui/button";import { Button } from "@/components/ui/button";

import { Badge } from "@/components/ui/badge";import { Badge } from "@/components/ui/badge";

import {import {

  MapPin,  MapPin,

  Navigation,                          <div>

  Star,                            <h4 className="font-medium text-sm mb-2">

  Clock,                              Available Vehicles:

  Zap,                            </h4>vigation,

  Car,  Star,

  Plus,  Clock,

  Minus,  Zap,

  Eye,  Car,

} from "lucide-react";  Plus,

import type { Station } from "@/services/stationService";  Minus,

import type { Vehicle } from "@/types/vehicle";  Eye,

import { stationService } from "@/services/stationService";} from "lucide-react";

import { useTranslation } from "@/contexts/TranslationContext";import type { Station } from "@/services/stationService";

import { useCurrency } from "@/lib/currency";import type { Vehicle } from "@/types/vehicle";

import { stationService } from "@/services/stationService";

interface GoogleMapsProps {import { useTranslation } from "@/contexts/TranslationContext";

  selectedStation?: string;import { useCurrency } from "@/lib/currency";

  onStationSelect: (stationId: string) => void;

  height?: string;interface GoogleMapsProps {

  showControls?: boolean;  selectedStation?: string;

  showLegend?: boolean;  onStationSelect: (stationId: string) => void;

  showInfo?: boolean;  height?: string;

}  showControls?: boolean;

  showLegend?: boolean;

export const GoogleMaps = ({  showInfo?: boolean;

  selectedStation,}

  onStationSelect,

  height = "500px",export const GoogleMaps = ({

  showControls = true,  selectedStation,

  showLegend = true,  onStationSelect,

  showInfo = true,  height = "500px",

}: GoogleMapsProps) => {  showControls = true,

  const [zoom, setZoom] = useState(12);  showLegend = true,

  const [selectedMarker, setSelectedMarker] = useState<Station | null>(null);  showInfo = true,

  const [showVehicleDetails, setShowVehicleDetails] = useState(false);}: GoogleMapsProps) => {

  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);  const [zoom, setZoom] = useState(12);

  const [stations, setStations] = useState<Station[]>([]);  const [selectedMarker, setSelectedMarker] = useState<Station | null>(null);

  const [stationVehicles, setStationVehicles] = useState<Record<string, Vehicle[]>>({});  const [showVehicleDetails, setShowVehicleDetails] = useState(false);

  const [loading, setLoading] = useState(true);  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);

  const [stations, setStations] = useState<Station[]>([]);

  const { t } = useTranslation();  const [stationVehicles, setStationVehicles] = useState<Record<string, Vehicle[]>>({});

  const { formatPrice } = useCurrency();  const [loading, setLoading] = useState(true);



  // Load stations data  const { t } = useTranslation();

  useEffect(() => {  const { formatPrice } = useCurrency();

    const loadStations = async () => {

      try {  // Load stations data

        setLoading(true);  useEffect(() => {

        const response = await stationService.getActiveStations();    const loadStations = async () => {

        setStations(response.stations);      try {

      } catch (error) {        setLoading(true);

        console.error('Error loading stations:', error);        const response = await stationService.getActiveStations();

      } finally {        setStations(response.stations);

        setLoading(false);      } catch (error) {

      }        console.error('Error loading stations:', error);

    };      } finally {

        setLoading(false);

    loadStations();      }

  }, []);    };



  const handleStationClick = async (station: Station) => {    loadStations();

    setSelectedMarker(station);  }, []);

    onStationSelect(station.id);

      const handleStationClick = async (station: Station) => {

    // Load vehicles for this station if not already loaded    setSelectedMarker(station);

    if (!stationVehicles[station.id]) {    onStationSelect(station.id);

      try {    

        const vehicleData = await stationService.getStationVehicles(station.id, 'AVAILABLE');    // Load vehicles for this station if not already loaded

        setStationVehicles(prev => ({    if (!stationVehicles[station.id]) {

          ...prev,      try {

          [station.id]: vehicleData.vehicles        const vehicleData = await stationService.getStationVehicles(station.id, 'AVAILABLE');

        }));        setStationVehicles(prev => ({

      } catch (error) {          ...prev,

        console.error('Error loading station vehicles:', error);          [station.id]: vehicleData.vehicles

      }        }));

    }      } catch (error) {

  };        console.error('Error loading station vehicles:', error);

      }

  const handleVehicleClick = (vehicle: Vehicle) => {    }

    setSelectedVehicle(vehicle);  };

    setShowVehicleDetails(true);

  };  const handleVehicleClick = (vehicle: Vehicle) => {

    setSelectedVehicle(vehicle);

  const getStationVehicles = (stationId: string): Vehicle[] => {    setShowVehicleDetails(true);

    return stationVehicles[stationId] || [];  };

  };

  const getStationVehicles = (stationId: string): Vehicle[] => {

  return (    return stationVehicles[stationId] || [];

    <div  };

      className="relative w-full bg-gray-100 rounded-lg overflow-hidden border"

      style={{ height }}  return (

    >    <div

      {/* Loading state */}      className="relative w-full bg-gray-100 rounded-lg overflow-hidden border"

      {loading ? (      style={{ height }}

        <div className="absolute inset-0 bg-gradient-to-br from-blue-50 via-green-50 to-blue-100 flex items-center justify-center">    >

          <div className="text-center">      {/* Loading state */}

            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>      {loading ? (

            <p className="text-gray-600">Loading stations...</p>        <div className="absolute inset-0 bg-gradient-to-br from-blue-50 via-green-50 to-blue-100 flex items-center justify-center">

          </div>          <div className="text-center">

        </div>            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>

      ) : (            <p className="text-gray-600">Loading stations...</p>

        <>          </div>

          {/* Mock Google Maps Container */}        </div>

          <div className="absolute inset-0 bg-gradient-to-br from-blue-50 via-green-50 to-blue-100">      ) : (

            {/* Map Controls */}        <>

            {showControls && (          {/* Mock Google Maps Container */}

              <div className="absolute top-4 right-4 flex flex-col gap-2 z-10">          <div className="absolute inset-0 bg-gradient-to-br from-blue-50 via-green-50 to-blue-100">

                <Button        {/* Map Controls */}

                  size="sm"        {showControls && (

                  variant="outline"          <div className="absolute top-4 right-4 flex flex-col gap-2 z-10">

                  className="bg-white shadow-md"            <Button

                  onClick={() => setZoom(Math.min(zoom + 1, 18))}              size="sm"

                >              variant="outline"

                  <Plus className="h-4 w-4" />              className="bg-white shadow-md"

                </Button>              onClick={() => setZoom(Math.min(zoom + 1, 18))}

                <Button            >

                  size="sm"              <Plus className="h-4 w-4" />

                  variant="outline"            </Button>

                  className="bg-white shadow-md"            <Button

                  onClick={() => setZoom(Math.max(zoom - 1, 8))}              size="sm"

                >              variant="outline"

                  <Minus className="h-4 w-4" />              className="bg-white shadow-md"

                </Button>              onClick={() => setZoom(Math.max(zoom - 1, 8))}

              </div>            >

            )}              <Minus className="h-4 w-4" />

            </Button>

            {/* Mock Street Grid */}          </div>

            <svg className="absolute inset-0 w-full h-full opacity-20">        )}

              {/* Horizontal streets */}

              {[1, 2, 3, 4, 5, 6].map((i) => (        {/* Mock Street Grid */}

                <line        <svg className="absolute inset-0 w-full h-full opacity-20">

                  key={`h-${i}`}          {/* Horizontal streets */}

                  x1="0"          {[1, 2, 3, 4, 5, 6].map((i) => (

                  y1={`${i * 80}px`}            <line

                  x2="100%"              key={`h-${i}`}

                  y2={`${i * 80}px`}              x1="0"

                  stroke="#666"              y1={`${i * 80}px`}

                  strokeWidth="1"              x2="100%"

                />              y2={`${i * 80}px`}

              ))}              stroke="#666"

              {/* Vertical streets */}              strokeWidth="1"

              {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (            />

                <line          ))}

                  key={`v-${i}`}          {/* Vertical streets */}

                  x1={`${i * 120}px`}          {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (

                  y1="0"            <line

                  x2={`${i * 120}px`}              key={`v-${i}`}

                  y2="100%"              x1={`${i * 120}px`}

                  stroke="#666"              y1="0"

                  strokeWidth="1"              x2={`${i * 120}px`}

                />              y2="100%"

              ))}              stroke="#666"

            </svg>              strokeWidth="1"

            />

            {/* Station Markers */}          ))}

            {stations.map((station) => {        </svg>

              const isSelected =

                selectedStation === station.id || selectedMarker?.id === station.id;        {/* Station Markers */}

              const currentStationVehicles = getStationVehicles(station.id);        {stations.map((station) => {

          const isSelected =

              // Mock positioning based on coordinates (simplified for demo)            selectedStation === station.id || selectedMarker?.id === station.id;

              const x = (station.coordinates.lng - 106.6) * 2000 + 100;          const currentStationVehicles = getStationVehicles(station.id);

              const y = (10.85 - station.coordinates.lat) * 3000 + 50;

          // Mock positioning based on coordinates (simplified for demo)

              return (          const x = (station.coordinates.lng - 106.6) * 2000 + 100;

                <div          const y = (10.85 - station.coordinates.lat) * 3000 + 50;

                  key={station.id}

                  className="absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2"          return (

                  style={{ left: `${x}px`, top: `${y}px` }}            <div

                  onClick={() => handleStationClick(station)}              key={station.id}

                >              className="absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2"

                  {/* Station Marker */}              style={{ left: `${x}px`, top: `${y}px` }}

                  <div className={`relative ${isSelected ? "z-20" : "z-10"}`}>              onClick={() => handleStationClick(station)}

                    <div            >

                      className={`              {/* Station Marker */}

                      flex items-center justify-center w-12 h-12 rounded-full border-4 border-white shadow-lg              <div className={`relative ${isSelected ? "z-20" : "z-10"}`}>

                      ${                <div

                        station.availableVehicles > 0                  className={`

                          ? "bg-green-500 hover:bg-green-600"                  flex items-center justify-center w-12 h-12 rounded-full border-4 border-white shadow-lg

                          : "bg-red-500 hover:bg-red-600"                  ${

                      }                    station.availableVehicles > 0

                      ${                      ? "bg-green-500 hover:bg-green-600"

                        isSelected                      : "bg-red-500 hover:bg-red-600"

                          ? "ring-4 ring-blue-300 scale-110"                  }

                          : "hover:scale-105"                  ${

                      }                    isSelected

                      transition-all duration-200                      ? "ring-4 ring-blue-300 scale-110"

                    `}                      : "hover:scale-105"

                    >                  }

                      <Car className="h-6 w-6 text-white" />                  transition-all duration-200

                    </div>                `}

                >

                    {/* Available vehicles count */}                  <Car className="h-6 w-6 text-white" />

                    <div className="absolute -top-2 -right-2 bg-blue-600 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center font-medium">                </div>

                      {station.availableVehicles}

                    </div>                {/* Available vehicles count */}

                <div className="absolute -top-2 -right-2 bg-blue-600 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center font-medium">

                    {/* Station Info Popup */}                  {station.availableVehicles}

                    {selectedMarker?.id === station.id && (                </div>

                      <Card className="absolute top-14 left-1/2 transform -translate-x-1/2 w-80 p-4 shadow-xl z-30 bg-white">

                        <div className="space-y-3">                {/* Station Info Popup */}

                          <div className="flex items-start justify-between">                {selectedMarker?.id === station.id && (

                            <div>                  <Card className="absolute top-14 left-1/2 transform -translate-x-1/2 w-80 p-4 shadow-xl z-30 bg-white">

                              <h3 className="font-semibold text-lg">                    <div className="space-y-3">

                                {station.name}                      <div className="flex items-start justify-between">

                              </h3>                        <div>

                              <p className="text-gray-600 text-sm flex items-center gap-1">                          <h3 className="font-semibold text-lg">

                                <MapPin className="h-4 w-4" />                            {station.name}

                                {station.address}                          </h3>

                              </p>                          <p className="text-gray-600 text-sm flex items-center gap-1">

                            </div>                            <MapPin className="h-4 w-4" />

                            <Badge                            {station.address}

                              variant={                          </p>

                                station.fastCharging ? "default" : "secondary"                        </div>

                              }                        <Badge

                            >                          variant={

                              <Zap className="h-3 w-3 mr-1" />                            station.fastCharging ? "default" : "secondary"

                              {station.fastCharging                          }

                                ? "Fast Charging"                        >

                                : "Standard"}                          <Zap className="h-3 w-3 mr-1" />

                            </Badge>                          {station.fastCharging

                          </div>                            ? t("common.hour")

                            : t("common.day")}

                          <div className="flex items-center gap-4 text-sm text-gray-600">                        </Badge>

                            <div className="flex items-center gap-1">                      </div>

                              <Star className="h-4 w-4 text-yellow-500 fill-current" />

                              {station.rating.toFixed(1)}                      <div className="flex items-center gap-4 text-sm text-gray-600">

                            </div>                        <div className="flex items-center gap-1">

                            <div className="flex items-center gap-1">                          <Star className="h-4 w-4 text-yellow-500 fill-current" />

                              <Clock className="h-4 w-4" />                          {station.rating}

                              {station.operatingHours.weekday || "24/7"}                        </div>

                            </div>                        <div className="flex items-center gap-1">

                            <div className="flex items-center gap-1">                          <Clock className="h-4 w-4" />

                              <Car className="h-4 w-4 text-green-600" />                          {station.operatingHours.weekday || "24/7"}

                              {station.availableVehicles}/{station.totalSlots}                        </div>

                            </div>                        <div className="flex items-center gap-1">

                          </div>                          <Car className="h-4 w-4 text-green-600" />

                          {station.availableVehicles}/{station.totalSlots}

                          {currentStationVehicles.length > 0 && (                        </div>

                            <div>                      </div>

                              <h4 className="font-medium text-sm mb-2">

                                Available Vehicles:                      {currentStationVehicles.length > 0 && (

                              </h4>                        <div>

                              <div className="grid grid-cols-2 gap-2 max-h-32 overflow-y-auto">                          <h4 className="font-medium text-sm mb-2">

                                {currentStationVehicles.slice(0, 4).map((vehicle) => (                            {t("common.availableVehicles")}:

                                  <div                          </h4>

                                    key={vehicle.id}                          <div className="grid grid-cols-2 gap-2 max-h-32 overflow-y-auto">

                                    className="text-xs p-2 bg-gray-50 rounded cursor-pointer hover:bg-gray-100 transition-colors"                            {currentStationVehicles.slice(0, 4).map((vehicle) => (

                                    onClick={() => handleVehicleClick(vehicle)}                              <div

                                  >                                key={vehicle.id}

                                    <div className="font-medium">                                className="text-xs p-2 bg-gray-50 rounded cursor-pointer hover:bg-gray-100 transition-colors"

                                      {vehicle.name}                                onClick={() => handleVehicleClick(vehicle)}

                                    </div>                              >

                                    <div className="text-gray-600">                                <div className="font-medium">

                                      {formatPrice(vehicle.pricePerHour)}/hour                                  {vehicle.name}

                                    </div>                                </div>

                                  </div>                                <div className="text-gray-600">

                                ))}                                  {formatPrice(vehicle.pricePerHour)}/

                              </div>                                  {t("common.hour")}

                              {currentStationVehicles.length > 4 && (                                </div>

                                <p className="text-xs text-gray-500 mt-1">                              </div>

                                  +{currentStationVehicles.length - 4} more vehicles                            ))}

                                </p>                          </div>

                              )}                          {currentStationVehicles.length > 4 && (

                            </div>                            <p className="text-xs text-gray-500 mt-1">

                          )}                              +{currentStationVehicles.length - 4}{" "}

                              {t("common.moreVehicles")}

                          <div className="flex gap-2">                            </p>

                            <Button size="sm" className="flex-1">                          )}

                              <Navigation className="h-4 w-4 mr-1" />                        </div>

                              Directions                      )}

                            </Button>

                            <Button                      <div className="flex gap-2">

                              size="sm"                        <Button size="sm" className="flex-1">

                              variant="outline"                          <Navigation className="h-4 w-4 mr-1" />

                              className="flex-1"                          {t("common.directions")}

                              asChild                        </Button>

                            >                        <Button

                              <Link to={`/stations/${station.id}`}>                          size="sm"

                                <Eye className="h-4 w-4 mr-1" />                          variant="outline"

                                View Details                          className="flex-1"

                              </Link>                          asChild

                            </Button>                        >

                          </div>                          <Link to="/stations">

                        </div>                            <Eye className="h-4 w-4 mr-1" />

                      </Card>                            {t("common.viewDetails")}

                    )}                          </Link>

                  </div>                        </Button>

                </div>                      </div>

              );                    </div>

            })}                  </Card>

                )}

            {/* Mock Current Location */}

            <div className="absolute bottom-32 left-1/2 transform -translate-x-1/2">                {/* Vehicle Details Popup */}

              <div className="w-4 h-4 bg-blue-600 rounded-full border-2 border-white shadow-lg pulse-animation">                {showVehicleDetails && selectedVehicle && (

                <div className="w-2 h-2 bg-white rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"></div>                  <Card className="absolute top-14 left-1/2 transform -translate-x-1/2 w-80 p-4 shadow-xl z-30 bg-white">

              </div>                    <div className="space-y-3">

            </div>                      <div className="flex items-start justify-between">

                        <div>

            {/* Map Legend */}                          <h3 className="font-semibold text-lg">

            {showLegend && (                            {selectedVehicle.name}

              <div className="absolute bottom-4 left-4 bg-white rounded-lg shadow-md p-3">                          </h3>

                <h4 className="font-medium text-sm mb-2">Legend</h4>                          <p className="text-gray-600 text-sm flex items-center gap-1">

                <div className="space-y-1 text-xs">                            <MapPin className="h-4 w-4" />

                  <div className="flex items-center gap-2">                            {selectedVehicle.location}

                    <div className="w-4 h-4 bg-green-500 rounded-full"></div>                          </p>

                    <span>Available Vehicles</span>                        </div>

                  </div>                        <Badge

                  <div className="flex items-center gap-2">                          variant={

                    <div className="w-4 h-4 bg-red-500 rounded-full"></div>                            selectedVehicle.availability === "available"

                    <span>No Vehicles</span>                              ? "default"

                  </div>                              : "secondary"

                  <div className="flex items-center gap-2">                          }

                    <div className="w-4 h-4 bg-blue-600 rounded-full"></div>                        >

                    <span>Your Location</span>                          {t(`common.${selectedVehicle.availability}`)}

                  </div>                        </Badge>

                </div>                      </div>

              </div>

            )}                      <div className="flex items-center gap-4 text-sm text-gray-600">

                        <div className="flex items-center gap-1">

            {/* Map Info */}                          <Star className="h-4 w-4 text-yellow-500 fill-current" />

            {showInfo && (                          {selectedVehicle.rating}

              <div className="absolute top-4 left-4 bg-white rounded-lg shadow-md p-3">                        </div>

                <h4 className="font-medium text-sm mb-1">Ho Chi Minh City</h4>                        <div className="flex items-center gap-1">

                <p className="text-xs text-gray-600">                          <Clock className="h-4 w-4" />

                  {stations.reduce(                          {selectedVehicle.trips} {t("common.trips")}

                    (acc, station) => acc + station.availableVehicles,                        </div>

                    0                        <div className="flex items-center gap-1">

                  )}{" "}                          <Zap className="h-4 w-4 text-green-600" />

                  Available Vehicles                          {selectedVehicle.range}km

                </p>                        </div>

                <p className="text-xs text-gray-600">                      </div>

                  {stations.length} Stations

                </p>                      <div className="text-center">

              </div>                        <div className="text-2xl font-bold text-green-600">

            )}                          {formatPrice(selectedVehicle.pricePerHour)}

          </div>                          <span className="text-sm font-normal text-gray-500">

        </>                            /{t("common.hour")}

      )}                          </span>

                        </div>

      {/* Vehicle Details Popup */}                        <div className="text-sm text-gray-500">

      {showVehicleDetails && selectedVehicle && (                          {formatPrice(selectedVehicle.pricePerDay)}/

        <Card className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 p-4 shadow-xl z-40 bg-white">                          {t("common.day")}

          <div className="space-y-3">                        </div>

            <div className="flex items-start justify-between">                      </div>

              <div>

                <h3 className="font-semibold text-lg">                      <div className="flex gap-2">

                  {selectedVehicle.name}                        <Button size="sm" className="flex-1" asChild>

                </h3>                          <Link to={`/vehicles/${selectedVehicle.id}`}>

                <p className="text-gray-600 text-sm flex items-center gap-1">                            <Eye className="h-4 w-4 mr-1" />

                  <MapPin className="h-4 w-4" />                            {t("common.viewDetails")}

                  {selectedVehicle.location}                          </Link>

                </p>                        </Button>

              </div>                        {selectedVehicle.availability === "available" && (

              <Badge                          <Button

                variant={                            size="sm"

                  selectedVehicle.availability === "available"                            variant="outline"

                    ? "default"                            className="flex-1"

                    : "secondary"                            asChild

                }                          >

              >                            <Link to={`/book/${selectedVehicle.id}`}>

                {selectedVehicle.availability}                              <Clock className="h-4 w-4 mr-1" />

              </Badge>                              {t("common.bookNow")}

            </div>                            </Link>

                          </Button>

            <div className="flex items-center gap-4 text-sm text-gray-600">                        )}

              <div className="flex items-center gap-1">                      </div>

                <Star className="h-4 w-4 text-yellow-500 fill-current" />

                {selectedVehicle.rating}                      <Button

              </div>                        size="sm"

              <div className="flex items-center gap-1">                        variant="ghost"

                <Clock className="h-4 w-4" />                        className="w-full"

                {selectedVehicle.trips} trips                        onClick={() => setShowVehicleDetails(false)}

              </div>                      >

              <div className="flex items-center gap-1">                        {t("common.close")}

                <Zap className="h-4 w-4 text-green-600" />                      </Button>

                {selectedVehicle.range}km                    </div>

              </div>                  </Card>

            </div>                )}

              </div>

            <div className="text-center">            </div>

              <div className="text-2xl font-bold text-green-600">          );

                {formatPrice(selectedVehicle.pricePerHour)}        })}

                <span className="text-sm font-normal text-gray-500">

                  /hour        {/* Mock Current Location */}

                </span>        <div className="absolute bottom-32 left-1/2 transform -translate-x-1/2">

              </div>          <div className="w-4 h-4 bg-blue-600 rounded-full border-2 border-white shadow-lg pulse-animation">

              <div className="text-sm text-gray-500">            <div className="w-2 h-2 bg-white rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"></div>

                {formatPrice(selectedVehicle.pricePerDay)}/day          </div>

              </div>        </div>

            </div>

        {/* Map Legend */}

            <div className="flex gap-2">        {showLegend && (

              <Button size="sm" className="flex-1" asChild>          <div className="absolute bottom-4 left-4 bg-white rounded-lg shadow-md p-3">

                <Link to={`/vehicles/${selectedVehicle.id}`}>            <h4 className="font-medium text-sm mb-2">

                  <Eye className="h-4 w-4 mr-1" />              {t("common.directions")}

                  View Details            </h4>

                </Link>            <div className="space-y-1 text-xs">

              </Button>              <div className="flex items-center gap-2">

              {selectedVehicle.availability === "available" && (                <div className="w-4 h-4 bg-green-500 rounded-full"></div>

                <Button                <span>{t("common.availableVehicles")}</span>

                  size="sm"              </div>

                  variant="outline"              <div className="flex items-center gap-2">

                  className="flex-1"                <div className="w-4 h-4 bg-red-500 rounded-full"></div>

                  asChild                <span>{t("common.noVehiclesFound")}</span>

                >              </div>

                  <Link to={`/book/${selectedVehicle.id}`}>              <div className="flex items-center gap-2">

                    <Clock className="h-4 w-4 mr-1" />                <div className="w-4 h-4 bg-blue-600 rounded-full"></div>

                    Book Now                <span>{t("common.location")}</span>

                  </Link>              </div>

                </Button>            </div>

              )}          </div>

            </div>        )}



            <Button        {/* Map Info */}

              size="sm"        {showInfo && (

              variant="ghost"          <div className="absolute top-4 left-4 bg-white rounded-lg shadow-md p-3">

              className="w-full"            <h4 className="font-medium text-sm mb-1">Ho Chi Minh City</h4>

              onClick={() => setShowVehicleDetails(false)}            <p className="text-xs text-gray-600">

            >              {stations.reduce(

              Close                (acc, station) => acc + station.availableVehicles,

            </Button>                0

          </div>              )}{" "}

        </Card>              Available Vehicles

      )}            </p>

    </div>            <p className="text-xs text-gray-600">

  );              {stations.length} Stations

};            </p>
          </div>
        )}
      </div>
        </>
      )}
    </div>
  );
};
